
细节：将 posit 位字符串转换为值
===============================

设置posit环境
-------------

我们在 I 型 unum中用 :math:`esizesize` 和 :math:`fsizesize`
定义了计算环境。 而在这里，我们将 :math:`nbits` 和 :math:`es`
定义为建立posit含义所需的全局整数值。 :math:`nbits`
值是数的总位数，可以是 2 或更大的任意整数；
:math:`es`\ 是指数位数，可以是 0 或更大的任何整数。 :math:`nbits` 和
:math:`es` 值可以相互独立地选择；
虽然看起来很奇怪，但您的确可以有一个最多 5 个指数位的 4 位posit。
也不会破坏数学。

与 I 型 unums 类似，\ **setpositenv** 例程使用 :math:`nbits` 和
:math:`es` 来计算表征 posit 环境的值。 可能的位模式数目 :math:`npat` 为
:math:`2^{nbits}`\ 。 值 :math:`2^{2^{es}}`
因为它经常出现，被赋予变量“:math:`useed`”。 除了计算 :math:`npat`
和\ :math:`useed` 之外，\ **setpositenv**
还找到最小和最大正数\ :math:`minpos` 和\ :math:`maxpos`\ 。
这些值决定动态范围，与IEEE
浮点定义一致。Posit的极端值是精确值，互为倒数；
:math:`\frac{1}{minpos}=maxpos`\ ； 动态范围完美平衡在值 1.0
的左右，并且每个2的整数幂都有一个精确的倒数。（这些属性不适用于 IEEE
浮点数。）

还需要设置 quire 寄存器的大小 **qsize** ，以及它具有的额外位数
**qextra** 来用最坏情况求和产生的进位。 quire
寄存器将在稍后有关融合操作的部分中进行解释。

.. figure:: assets/image-20230713100905943.png

   image-20230713100905943

例如，具有单比特指数位的 6 位 posit 环境是这样建立的：

.. raw:: latex

   \diilbookstyleinputcell

.. code:: mathematica

   setpositenv[{6, 1}]

该命令分配了这些全局变量：

.. raw:: latex

   \diilbookstyleinputcell

.. code:: mathematica

   {nbits, es, npat, useed, minpos, maxpos, qsize, qextra}

:math:`\left \{6, 1, 64, 4, \frac{1}{256}, 256, 64, 32\right \}`

大多数计算机体系结构都强烈倾向于使用 2 的幂作为变量的位大小，或者至少是
8 位字节的倍数。 如果使用 56 位posit而不是 64
位浮点对计算机来说不是性能负担，那么 56 位posit通常可以提供比 64
位浮点更准确的答案。
在带宽有限的计算机上，较小数量所需的内存和带宽的节省可能会节省时间（以及能量和功率），具体取决于它们需要在较大的二次幂边界上对齐读取和存储的程度。
用户可能会发现 64 位浮点对于他们的应用来说有些过大，但他们需要比 32
位浮点提供的更高的精度或动态范围； 在某些情况下，32
位posit可能就足够了，并且比 64 位标准浮点具有明显的性能和存储优势。
类似地，16 位posit有时可以代替 32
位浮点数，并且我们知道至少一种应用（神经网络训练）可以用 8 位posit代替
16 位浮点数。 使用 quire
寄存器是一种创建长算术运算序列的强大方法，最后只有一次舍入误差，甚至可以在某些情况下允许
16 位posit替换 64 位浮点数。

注意到\ :math:`maxpos` 与 :math:`minpos`
之比是\ :math:`useed^{2nbits-4}`\ ，它决定了posit的动态范围。
回想一下，\ :math:`useed`\ 是 :math:`2^{2^{es}}`\ 。 posit
格式使用regime字段来对\ :math:`useed`\ 求从 :math:`-nbits+1` 到
:math:`nbits-1` 之间的任何整数的幂次，因此动态范围是指数的指数的指数。
因此与IEEE浮点系统相比，Posit可以用更少的指数位创建更大的动态范围，从而留下更多的小数位来提高结果的准确性。
换句话说，\ :math:`es`\ 设置很强大，所以要小心。大于5的值可能会消耗掉计算机的内存；简单地打印es=5的minpos的精确值需要几GB。

提取符号位
----------

如果将 posit 位字符串解释为 2 的补码整数，则其范围为 -npat 到 npat-1。
Mathematica 不将 2 的补码整数作为本机类型处理，因此此解释必须使用 0 到
npat-1 之间的整数。 npat/2
的无符号整数是表示\ :math:`\pm\infty`\ 的位串。
如果用有符号整数，则\ :math:`\pm\infty`\ 的位串的值对应于-npat/2。

如果输入整数（被视为位字符串）是可以表示为posit的，则 **positQ**
测试返回 True，否则返回 False。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: mathematica

   positQ[p_Integer] := 0 <= p < npat

以下函数将帮助解决 Mathematica 中缺少 2 的补码整数的问题。

.. raw:: latex

   \diilbookstyleinputcell

.. code:: mathematica

   twoscomp[sign_, p_] := Mod[If[sign > 0, p, npat - p], npat]

提取一个 posit
的符号位很容易，它是最高有效位，\ :math:`\color{red}0`\ 表示正数（包括零）或
:math:`\color{red}1` 表示负数（和\ :math:`\pm\infty`\ ）。
位的颜色编码与所有类型的 unum
所使用的颜色编码类似，这使得长二进制字符串更易于阅读。
符号位颜色编码为红色（RGB 分量 1、0.125、0）：

.. figure:: assets/image-20230713110538517.png

   image-20230713110538517

在可能的假设值的极值点进行测试，包括我们刚刚设置的 {6,1} 环境的非法值：

.. figure:: assets/image-20230713110648993.png

   image-20230713110648993

请注意，\ **positQ** 函数可以保护我们免于计算超出范围的整数 **npat**
的符号位\ **signbit**\ ，因为 posit 位字符串的范围是从 :math:`0` 到
:math:`npat-1`\ （当视为无符号整数时）。 在 C 环境中，测试输入 p
是表示有效posit的有符号整数，则需要满足
:math:`-32 \le p \lt 32`\ ，而不是 :math:`0 \le p \lt 64`\ 。 （当
Mathematica
被要求执行运行范围外操作时，它只是将表达式回显给用户，就像上面返回“``signbit[64]``”时一样。）

提取regime位
------------

*regime*\ 字段由相同位（全 0 或全 1）的长度决定。
相同的状态位采用琥珀色颜色编码（RGB 0.8、0.6、0.2）。
解码它的一个简单方法是，如果 posit 的符号位为 1，则将该 posit
的位串看作有符号整数按 2 的补码取反（这意味着翻转所有位并加 1）。
在汇编语言中，此函数中的许多看起来复杂的表达式在大多数处理器上是一个时钟周期内执行的单指令，比如
“查找第一个1”或“计算前导0的数量”。
在\ **regimebits**\ 函数中，我们将二进制数字作为字符串分开，但真正的硬件（或低级语言中的例程）可以更快、更简单地执行位提取。

当到达字符串末尾或遇到相反的位时，位运行终止。 相反位的颜色为棕色（RGB
0.6、0.4、0.2）。

.. figure:: assets/image-20230713112858628.png

   image-20230713112858628

对regime字段的解释很像衣服的尺寸； L 为 Large，XL 为 Extra Large，XXL 为
Extra Extra Large，依此类推。 计算 X 字符的个数。
函数\ **regimevalue**\ 使用类似的原理，就一行代码函数。
它本应该是\ **regimebits**\ 函数的输出，但为了清楚起见，我们分两个阶段计算regime字段表示的整数。

.. figure:: assets/image-20230713113445719.png

   image-20230713113445719

这里有两个例子。 **注意对于正指数，regime值比运行中的位数少
1，因为我们需要能够表示零值**\ 。
同样，硬件可以毫不费力地快速完成这种事情； 它看起来很像 2 的补码逻辑。

首先，一个小的正数（记住，我们仍然处于 6 位 posit 环境中）：

.. figure:: assets/image-20230713113506724.png

   image-20230713113506724

接下来，尝试一个负数，按 2 的补码形式的取反， 0 位串变成了 1 位串。

注：100001的2的补码为011110 + 1 = 011111； 即翻转所有位并加 1

.. figure:: assets/image-20230713120609748.png

   image-20230713120609748

提取指数位
----------

下一个字段是指数位。 即使 es
大于零，也可能不存在任何指数位，因为regime位可能会将部分或全部指数位挤出数字的右端！
例如，\ :math:`\color{red}0\color{orange}11111`
没有指数位，\ :math:`\color{red}0\color{orange}1111\color{brown}0`
也没有。对于较短的regime字段，指数位才开始出现，例如
:math:`\color{red}0\color{orange}111\color{brown}0\color{blue}0` 和
:math:`\color{red}0\color{orange}111\color{brown}0\color{blue}1`\ 。

在下面的代码中，regime位由相反的位终止，因此我们跳过该终止位并查看下一个
es 位以及剩下的任何位，以较小者为准。 结果可以是从空集 { } 到长度为 es
的位串。

.. figure:: assets/image-20230713122423964.png

   image-20230713122423964

这些指数位串中不存在浮点数那样的“偏移”，因此它们表示的 2
的幂只是一个无符号整数。 指数位采用蓝色颜色编码（RGB 值 0.25、0.5、1）。
如果指数位为 :math:`\color{blue}110` = 6，则意味着 :math:`2^6`
是指数位贡献的缩放因子。
如果没有指数位，则指数为零并且指数位贡献的比例因子为\ :math:`2^0=1`\ 。

提取小数位
----------

一旦我们有了小数位，我们就拥有了posit位串的所有四个部分，并且可以直接计算它所代表的值。
小数位是指数右侧的所有位，如果它们没有被其他位挤出右端的话。
（如果被挤出了就是全零，代表的小数的值为 1.0 。换句话说，隐藏位始终为
1）。\ **fractionbits** 函数与 **exponentbits** 的不同之处仅在于使用
**startbit**
的值后逐一获取所有剩余位，而不是停在设定的最大数量处。这就是posit随比例因子不同有不同精度的原因。如果比例因子很小，就会有足够的位来表达高精度的小数。
posit的的幅度很大或是很小，那么留给精度的位数就越少。

.. figure:: assets/image-20230713125416178.png

   image-20230713125416178

小数的颜色编码是缺省的\ **黑色**\ 。

把各个部分组织起来： p2x函数
----------------------------

遵循 Type I unum 原型环境的命名约定，我们将把posit位串 :math:`p`
转换为数学上的值 :math:`x` 的函数称为 **p2x** 函数。
它将各个部分组合在一起如下

.. math::


   \text{有符号整数表示的Posit的值 } p= \left \{ \begin{array}{ll}
   p=0 & 0, \\
   p=-npat/2 & \pm\infty \\
   \text{其他 } p \text{ 取值} & (-1)^s \times useed^k\times2^e\times f
   \end{array}
   \right.

其中 s = 符号位，k 是由regime字段表示的整数，e 是由指数位表示的整数，f
是小数（包括始终为 1 的隐藏位）。以下例程提取 s， k、e 和
f，然后应用上式。

.. figure:: assets/image-20230713131504854.png

   image-20230713131504854

（由于 Mathematica 不支持 2 的补码整数，因此 :math:`\pm\infty` 的测试是
:math:`p` 是否为 :math:`npat/2` 而不是 :math:`-npat/2`\ 。并且我们使用
**ComplexInfinity** 作为 Mathematica 等价的\ :math:`\pm\infty`\ 。）

“**colorcodep**”函数使Posit二进制字符串更易于阅读。首先显示原始位串，然后为该数字或其
2 的补码（如果该数字位于投影实数圆的左半部分）的位字段着色。

.. figure:: assets/image-20230713131702684.png

   image-20230713131702684

我们需要至少两个指数位来演示指数位如何被regime位挤出，因此我们将环境更改为{6,2}，并创建每个可能的位串及其含义的表。
该表从代表最小有符号整数的位串开始（100000
是-32），一直计数到零，然后再计数到最大有符号整数（011111 是 +32）：

.. figure:: assets/image-20230713154825510.png

   image-20230713154825510

.. figure:: assets/image-20230713154725754.png

   image-20230713154725754
