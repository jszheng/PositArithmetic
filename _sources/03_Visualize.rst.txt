
可视化射影实数
==============

最小的posit，带有useed
----------------------

与实数轴不同，射影实数将线包裹在一个圆上，所以负无穷大和正无穷大在顶部相遇。

有时，事物的发明方式并不是理解它们的最简单方法，这就是为什么我们首先在第
2 节中展示位字段，现在才展示它们的几何推导。 类型 III Posit算术源自类型
II unum，后者也将二进制整数映射到射影实数，但在类型 III
中，我们放宽了所有值都具有精确倒数的要求。 II 型和 III 型 unum
都以这个两比特的模板开头的：

.. figure:: assets/image-20230713160353886.png

   image-20230713160353886

围绕环外侧的 2
的补码格式的有符号整数与实数在完全相同的点处从正值绕回到负值。
这消除了“负零”； 不幸的是，它同时也把\ :math:`-\infty`\ 和
:math:`+\infty`\ 不再看成不同的量，但解决这点比处理两种形式的零要简单得多，这两种零有时被认为是相等的，有时被不同地对待，这就是
IEEE 浮点数的所做的。

上面的环虽然只有两位，但却代表了一个数字系统。 我们通过在 1 和
:math:`\pm\infty`\ 之间插入一个值来构成到三比特的数。
可以是大于1的某个实数； 可以是 2、或 10、或 :math:`\pi`\ 、或
1.00003、或 :math:`10^{100}`\ 。
选择就像在unum环上“播种”生长出更宽的数，因此我们将其称为“*useed*”。
我们遵循类型 II
规则，也就是垂直轴上镜像的点是相反的，水平轴上镜像的点是倒数。

.. figure:: assets/image-20230713162429381.png

   image-20230713162429381

下一步，我们应该在\ :math:`useed`\ 和\ :math:`\pm\infty`\ 之间放置么？
嗯，\ :math:`useed^2` 确实有效。
然后，我们可以通过将\ :math:`useed^{1/2}=\sqrt{useed}`
放在1和\ :math:`useed`\ 之间来获得一对优雅的新对称点，特别是如果\ :math:`\sqrt{useed}`\ 是一个非常适合计算机硬件的整数。
如果 :math:`\sqrt{\sqrt{useed}}` 也是整数，我们可以重复这个过程。

所使用的对计算机硬件友好的\ :math:`useed`\ 值有
:math:`2`\ 、\ :math:`2^2`\ 、\ :math:`(2^2)^2`
等，反复平方以确保我们可以反复求平方根并返回到 2。这个数列为 2 , 4, 16,
256, 65536, … … 。在 1 和 2 之间，我们可以线性填充环，即如果多一位，则为
{1, 1.5, 2}，如果多两位，则为 {1, 1.25, 1.5, 1.75, 2}，依此类推
，与浮点分数的工作方式完全相同。 从值 2 开始，平方得到使用的次数是
:math:`es`\ 。 这就是为什么\ :math:`useed=2^{2^{es}}`\ 。

**ringplot**\ 例程显示了表示排列在环上的射影实数的位置，其数学形式位于内部，颜色编码的二进制形式位于外部。
它使用任何 nbits 和 es 环境设置。
我们切换到旋转文本，这样我们就可以在空间中塞入更多值，尽管这使得阅读起来有些奇怪。
尝试 nbits=3 和 es=1：

.. figure:: assets/image-20230713170800383.png

   image-20230713170800383
